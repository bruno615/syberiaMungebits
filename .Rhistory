#' @return numeric. Number of occurances of the particular word in each line.
#' @author Mike Bruno
#' @examples
#' mp <- mungebits::mungeplane(data.frame(id = c(1:2), text = c("This is an example.", "Great code uses examples like this example."), stringsAsFactors = FALSE))
#' mb <- mungebits:::mungebit(paramatch)
#' mb$run(mp, col = 'text', top_n = 2)
#' @export
paramatch <- function(dataframe, col, top_n_words = 5, suppress.input = FALSE, blacklist = c()) {
# Grab the string vector
paragraph_col <- dataframe[[col]]
# Make sure inputs are valid
stopifnot(is.character(paragraph_col))
stopifnot(is.numeric(top_n_words))
stopifnot(top_n_words >= 1)
stopifnot(top_n_words %% 1 == 0)
stopifnot(is.logical(suppress.input))
# Standardize the input
paragraph_col <- toupper(paragraph_col)
paragraph_col <- gsub("[[:punct:]]", " ", paragraph_col)
paragraph_col <- gsub("[[:space:]]+", " ", paragraph_col)
# Munge
if(!('top_n' %in% names(inputs))) { # Train # TODO add something in case top N length is different from inputs
# Find the top N words
# Split string into words
allwords <- unlist(strsplit(paragraph_col, " "))
allwords <- allwords[allwords != ""]
# Find the unique
words <- unique(allwords)
# Full word matching
frequency <- data.frame(word = words,
occurances = unlist(lapply(words, function(x) length(grep(paste0("\\<", x, "\\>"), allwords)))),
stringsAsFactors = FALSE)
# Blacklist
frequency <- frequency[!frequency$word %in% blacklist, ]
# Ensure that N isn't greater than the total number of unique words
if(length(allwords) < top_n_words) {
message("Note: N is too high, defaulting to the number of unique words")
top_n_words <- length(words)
}
# Take the top N words
top_n <- frequency[order(frequency$occurances, decreasing = TRUE),][1:top_n_words, 1]
# Write top_n to the Environment
inputs$top_n <<- top_n
} else {
top_n <- inputs$top_n
}
# Add a column of match counts for each of the top n words
for (i in 1:length(top_n)){
output <- data.frame(stringr::str_count(paragraph_col, paste0("\\<", top_n[i], "\\>")))
#Add the Column to the exterior dataset
eval(substitute({
dataframe <- cbind(dataframe, output)
}), envir = parent.frame()
)
}
# Set the added column names and optionally suppress the input column
eval(substitute({
tail(colnames(dataframe), top_n) <- unlist(lapply(top_n, function(x) paste0("col_", x)))
if (suppress.input) dataframe[[col]] <- NULL
}), envir = parent.frame()
)
}
context('paramatch')
# Example Dataframes
df <- data.frame(
id = 1:10,
text = c("goldeen goldeen goldeen",
"goldeen goldeen",
"(^_^)     hello? hello? hello?",
" ",
" O==00==O ",
"An ant annhililated an ardvark and another ant.",
"An Ardvark's favorite meal is an ant.",
"Talking,like?Christopher...Walken* //Will// have# no<> effect =) . . .",
"Talking like Christopher Walken will have no effect",
"Only whole words are being counted"),
stringsAsFactors = FALSE
)
df2 <- data.frame(
id = 1:3,
text = c("This is the end",
"My only friend the end",
"My friend put it to the end"),
stringsAsFactors = FALSE
)
# Testing Begins
test_that("The training data is perserved for use with predictions", {
mp <- mungebits:::mungeplane(df)
mb <- mungebits:::mungebit(paramatch)
mb$run(mp, col = 'text', top_n = 3)
mp2 <- mungebits:::mungeplane(df2)
mb$run(mp2, col = 'text', top_n = 3)
expect_equal(colnames(mp$data), colnames(mp2$data))
})
mb <- NULL
test_that("Check that N defaults the the number of unique words if set to high", {
mp <- mungebits:::mungeplane(df[1:2, ])
mp2 <- mp
mb <- mungebits:::mungebit(paramatch)
expect_equal(mb$run(mp, col = 'text', top_n = 1),
suppressMessages(mb$run(mp2, col = 'text', top_n = 6)))
})
mb <- NULL
test_that("It handles blank, space only, or punctuation entries (which should all be ignored)", {
mp <- mungebits:::mungeplane(df[3:5, ])
mb <- mungebits:::mungebit(paramatch)
mb$run(mp, col = 'text', top_n = 1)
expect_equal(mp$data$col_HELLO, c(3, 0, 0))
})
mb <- NULL
test_that("Only whole words are being counted", {
mp <- mungebits:::mungeplane(df[6:7, ])
mb <- mungebits:::mungebit(paramatch)
mb$run(mp, col = 'text', top_n = 2, suppress.input = TRUE)
rownames(mp$data) <- NULL
expect_equal(mp$data[,-1], data.frame(col_AN = c(2, 2), col_ANT = c(2, 1)))
})
mb <- NULL
test_that("punctuation works in the same way that spaces do", {
mp <- mungebits:::mungeplane(df[8:9, ])
mb <- mungebits:::mungebit(paramatch)
mb$run(mp, col = 'text', top_n = 4, suppress.input = TRUE)
row1 <- mp$data[1, -1]
row2 <- mp$data[2, -1]
rownames(row1) <- NULL
rownames(row2) <- NULL
expect_equal(row1, row2)
})
mb <- NULL
test_that("The blacklist prevents words from participating in the top n columns", {
mp <- mungebits:::mungeplane(df)
mp2 <- mungebits:::mungeplane(df)
mb <- mungebits:::mungebit(paramatch)
mb$run(mp, col = 'text', top_n = 6)
blacklist <- sapply(colnames(mp$data[3:5]), function(s) substring(s, 5))
mb2 <- mungebits:::mungebit(paramatch)
mb2$run(mp2, col = 'text', top_n = 3, blacklist = blacklist)
expect_equal(mp$data[-c(3:5)], mp2$data)
})
mb <- NULL
mb2 <- NULL
#' Mungebit to count the occurances of the N most repeated words in a dataframe column.
#'
#' Trains to find the most repeated words.  Then counts the number of matches for dataframes passed to it.
#'
#' This conducts full word matching only.  Substring matches do not count towards the total.
#'
#' @param dataframe
#' @param col character. The column name pertaining to paragraphs for matching.
#' @param top_n_words integer.  The number of top strings to count in each line.
#' @param suppress.input logical.  Suppresses the Input column of the output data frame.
#' @param blacklist character. Prevents undesired words participating int he output.
#' @return numeric. Number of occurances of the particular word in each line.
#' @author Mike Bruno
#' @examples
#' mp <- mungebits::mungeplane(data.frame(id = c(1:2), text = c("This is an example.", "Great code uses examples like this example."), stringsAsFactors = FALSE))
#' mb <- mungebits:::mungebit(paramatch)
#' mb$run(mp, col = 'text', top_n = 2)
#' @export
paramatch <- function(dataframe, col, top_n_words = 5, suppress.input = FALSE, blacklist = c()) {
# Grab the string vector
paragraph_col <- dataframe[[col]]
# Make sure inputs are valid
stopifnot(is.character(paragraph_col))
stopifnot(is.numeric(top_n_words))
stopifnot(top_n_words >= 1)
stopifnot(top_n_words %% 1 == 0)
stopifnot(is.logical(suppress.input))
# Standardize the input
paragraph_col <- toupper(paragraph_col)
paragraph_col <- gsub("[[:punct:]]", " ", paragraph_col)
paragraph_col <- gsub("[[:space:]]+", " ", paragraph_col)
# Munge
if(!('top_n' %in% names(inputs))) { # Train # TODO add something in case top N length is different from inputs
# Find the top N words
# Split string into words
allwords <- unlist(strsplit(paragraph_col, " "))
allwords <- allwords[allwords != ""]
# Find the unique
words <- unique(allwords)
# Full word matching
frequency <- data.frame(word = words,
occurances = unlist(lapply(words, function(x) length(grep(paste0("\\<", x, "\\>"), allwords)))),
stringsAsFactors = FALSE)
# Blacklist
frequency <- frequency[!frequency$word %in% blacklist, ]
# Ensure that N isn't greater than the total number of unique words
if(length(allwords) < top_n_words) {
message("Note: N is too high, defaulting to the number of unique words")
top_n_words <- length(words)
}
# Take the top N words
top_n <- frequency[order(frequency$occurances, decreasing = TRUE),][1:top_n_words, 1]
# Write top_n to the Environment
inputs$top_n <<- top_n
} else {
top_n <- inputs$top_n
}
# Add a column of match counts for each of the top n words
for (i in 1:length(top_n)){
output <- data.frame(stringr::str_count(paragraph_col, paste0("\\<", top_n[i], "\\>")))
#Add the Column to the exterior dataset
eval(substitute({
dataframe <- cbind(dataframe, output)
}), envir = parent.frame()
)
}
# Set the added column names and optionally suppress the input column
eval(substitute({
#tail(colnames(dataframe), top_n) [(dim(dataframe)[2]-top_n_words + 1):dim(dataframe)[2]] <- unlist(lapply(top_n, function(x) paste0("col_", x)))
tail(colnames(dataframe), top_n -1) <- unlist(lapply(top_n, function(x) paste0("col_", x)))
if (suppress.input) dataframe[[col]] <- NULL
}), envir = parent.frame()
)
}
context('paramatch')
# Example Dataframes
df <- data.frame(
id = 1:10,
text = c("goldeen goldeen goldeen",
"goldeen goldeen",
"(^_^)     hello? hello? hello?",
" ",
" O==00==O ",
"An ant annhililated an ardvark and another ant.",
"An Ardvark's favorite meal is an ant.",
"Talking,like?Christopher...Walken* //Will// have# no<> effect =) . . .",
"Talking like Christopher Walken will have no effect",
"Only whole words are being counted"),
stringsAsFactors = FALSE
)
df2 <- data.frame(
id = 1:3,
text = c("This is the end",
"My only friend the end",
"My friend put it to the end"),
stringsAsFactors = FALSE
)
# Testing Begins
test_that("The training data is perserved for use with predictions", {
mp <- mungebits:::mungeplane(df)
mb <- mungebits:::mungebit(paramatch)
mb$run(mp, col = 'text', top_n = 3)
mp2 <- mungebits:::mungeplane(df2)
mb$run(mp2, col = 'text', top_n = 3)
expect_equal(colnames(mp$data), colnames(mp2$data))
})
mb <- NULL
test_that("Check that N defaults the the number of unique words if set to high", {
mp <- mungebits:::mungeplane(df[1:2, ])
mp2 <- mp
mb <- mungebits:::mungebit(paramatch)
expect_equal(mb$run(mp, col = 'text', top_n = 1),
suppressMessages(mb$run(mp2, col = 'text', top_n = 6)))
})
mb <- NULL
test_that("It handles blank, space only, or punctuation entries (which should all be ignored)", {
mp <- mungebits:::mungeplane(df[3:5, ])
mb <- mungebits:::mungebit(paramatch)
mb$run(mp, col = 'text', top_n = 1)
expect_equal(mp$data$col_HELLO, c(3, 0, 0))
})
mb <- NULL
test_that("Only whole words are being counted", {
mp <- mungebits:::mungeplane(df[6:7, ])
mb <- mungebits:::mungebit(paramatch)
mb$run(mp, col = 'text', top_n = 2, suppress.input = TRUE)
rownames(mp$data) <- NULL
expect_equal(mp$data[,-1], data.frame(col_AN = c(2, 2), col_ANT = c(2, 1)))
})
mb <- NULL
test_that("punctuation works in the same way that spaces do", {
mp <- mungebits:::mungeplane(df[8:9, ])
mb <- mungebits:::mungebit(paramatch)
mb$run(mp, col = 'text', top_n = 4, suppress.input = TRUE)
row1 <- mp$data[1, -1]
row2 <- mp$data[2, -1]
rownames(row1) <- NULL
rownames(row2) <- NULL
expect_equal(row1, row2)
})
mb <- NULL
test_that("The blacklist prevents words from participating in the top n columns", {
mp <- mungebits:::mungeplane(df)
mp2 <- mungebits:::mungeplane(df)
mb <- mungebits:::mungebit(paramatch)
mb$run(mp, col = 'text', top_n = 6)
blacklist <- sapply(colnames(mp$data[3:5]), function(s) substring(s, 5))
mb2 <- mungebits:::mungebit(paramatch)
mb2$run(mp2, col = 'text', top_n = 3, blacklist = blacklist)
expect_equal(mp$data[-c(3:5)], mp2$data)
})
mb <- NULL
mb2 <- NULL
#' Mungebit to count the occurances of the N most repeated words in a dataframe column.
#'
#' Trains to find the most repeated words.  Then counts the number of matches for dataframes passed to it.
#'
#' This conducts full word matching only.  Substring matches do not count towards the total.
#'
#' @param dataframe
#' @param col character. The column name pertaining to paragraphs for matching.
#' @param top_n_words integer.  The number of top strings to count in each line.
#' @param suppress.input logical.  Suppresses the Input column of the output data frame.
#' @param blacklist character. Prevents undesired words participating int he output.
#' @return numeric. Number of occurances of the particular word in each line.
#' @author Mike Bruno
#' @examples
#' mp <- mungebits::mungeplane(data.frame(id = c(1:2), text = c("This is an example.", "Great code uses examples like this example."), stringsAsFactors = FALSE))
#' mb <- mungebits:::mungebit(paramatch)
#' mb$run(mp, col = 'text', top_n = 2)
#' @export
paramatch <- function(dataframe, col, top_n_words = 5, suppress.input = FALSE, blacklist = c()) {
# Grab the string vector
paragraph_col <- dataframe[[col]]
# Make sure inputs are valid
stopifnot(is.character(paragraph_col))
stopifnot(is.numeric(top_n_words))
stopifnot(top_n_words >= 1)
stopifnot(top_n_words %% 1 == 0)
stopifnot(is.logical(suppress.input))
# Standardize the input
paragraph_col <- toupper(paragraph_col)
paragraph_col <- gsub("[[:punct:]]", " ", paragraph_col)
paragraph_col <- gsub("[[:space:]]+", " ", paragraph_col)
# Munge
if(!('top_n' %in% names(inputs))) { # Train # TODO add something in case top N length is different from inputs
# Find the top N words
# Split string into words
allwords <- unlist(strsplit(paragraph_col, " "))
allwords <- allwords[allwords != ""]
# Find the unique
words <- unique(allwords)
# Full word matching
frequency <- data.frame(word = words,
occurances = unlist(lapply(words, function(x) length(grep(paste0("\\<", x, "\\>"), allwords)))),
stringsAsFactors = FALSE)
# Blacklist
frequency <- frequency[!frequency$word %in% blacklist, ]
# Ensure that N isn't greater than the total number of unique words
if(length(allwords) < top_n_words) {
message("Note: N is too high, defaulting to the number of unique words")
top_n_words <- length(words)
}
# Take the top N words
top_n <- frequency[order(frequency$occurances, decreasing = TRUE),][1:top_n_words, 1]
# Write top_n to the Environment
inputs$top_n <<- top_n
} else {
top_n <- inputs$top_n
}
# Add a column of match counts for each of the top n words
for (i in 1:length(top_n)){
output <- data.frame(stringr::str_count(paragraph_col, paste0("\\<", top_n[i], "\\>")))
#Add the Column to the exterior dataset
eval(substitute({
dataframe <- cbind(dataframe, output)
}), envir = parent.frame()
)
}
# Set the added column names and optionally suppress the input column
browser()
eval(substitute({
#tail(colnames(dataframe), top_n) [(dim(dataframe)[2]-top_n_words + 1):dim(dataframe)[2]] <- unlist(lapply(top_n, function(x) paste0("col_", x)))
tail(colnames(dataframe), top_n -1) <- unlist(lapply(top_n, function(x) paste0("col_", x)))
if (suppress.input) dataframe[[col]] <- NULL
}), envir = parent.frame()
)
}
mp <- mungebits:::mungeplane(df)
mb <- mungebits:::mungebit(paramatch)
mb$run(mp, col = 'text', top_n = 3)
tail(colnames(dataframe), top_n -1)
#tail(colnames(dataframe), top_n) [(dim(dataframe)[2]-top_n_words + 1):dim(dataframe)[2]] <- unlist(lapply(top_n, function(x) paste0("col_", x)))
#' Mungebit to count the occurances of the N most repeated words in a dataframe column.
#'
#' Trains to find the most repeated words.  Then counts the number of matches for dataframes passed to it.
#'
#' This conducts full word matching only.  Substring matches do not count towards the total.
#'
#' @param dataframe
#' @param col character. The column name pertaining to paragraphs for matching.
#' @param top_n_words integer.  The number of top strings to count in each line.
#' @param suppress.input logical.  Suppresses the Input column of the output data frame.
#' @param blacklist character. Prevents undesired words participating int he output.
#' @return numeric. Number of occurances of the particular word in each line.
#' @author Mike Bruno
#' @examples
#' mp <- mungebits::mungeplane(data.frame(id = c(1:2), text = c("This is an example.", "Great code uses examples like this example."), stringsAsFactors = FALSE))
#' mb <- mungebits:::mungebit(paramatch)
#' mb$run(mp, col = 'text', top_n = 2)
#' @export
paramatch <- function(dataframe, col, top_n_words = 5, suppress.input = FALSE, blacklist = c()) {
# Grab the string vector
paragraph_col <- dataframe[[col]]
# Make sure inputs are valid
stopifnot(is.character(paragraph_col))
stopifnot(is.numeric(top_n_words))
stopifnot(top_n_words >= 1)
stopifnot(top_n_words %% 1 == 0)
stopifnot(is.logical(suppress.input))
# Standardize the input
paragraph_col <- toupper(paragraph_col)
paragraph_col <- gsub("[[:punct:]]", " ", paragraph_col)
paragraph_col <- gsub("[[:space:]]+", " ", paragraph_col)
# Munge
if(!('top_n' %in% names(inputs))) { # Train # TODO add something in case top N length is different from inputs
# Find the top N words
# Split string into words
allwords <- unlist(strsplit(paragraph_col, " "))
allwords <- allwords[allwords != ""]
# Find the unique
words <- unique(allwords)
# Full word matching
frequency <- data.frame(word = words,
occurances = unlist(lapply(words, function(x) length(grep(paste0("\\<", x, "\\>"), allwords)))),
stringsAsFactors = FALSE)
# Blacklist
frequency <- frequency[!frequency$word %in% blacklist, ]
# Ensure that N isn't greater than the total number of unique words
if(length(allwords) < top_n_words) {
message("Note: N is too high, defaulting to the number of unique words")
top_n_words <- length(words)
}
# Take the top N words
top_n <- frequency[order(frequency$occurances, decreasing = TRUE),][1:top_n_words, 1]
# Write top_n to the Environment
inputs$top_n <<- top_n
} else {
top_n <- inputs$top_n
}
# Add a column of match counts for each of the top n words
for (i in 1:length(top_n)){
output <- data.frame(stringr::str_count(paragraph_col, paste0("\\<", top_n[i], "\\>")))
#Add the Column to the exterior dataset
eval(substitute({
dataframe <- cbind(dataframe, output)
}), envir = parent.frame()
)
}
# Set the added column names and optionally suppress the input column
browser()
eval(substitute({
#tail(colnames(dataframe), top_n) [(dim(dataframe)[2]-top_n_words + 1):dim(dataframe)[2]] <- unlist(lapply(top_n, function(x) paste0("col_", x)))
tail(colnames(dataframe), top_n_words) <- unlist(lapply(top_n, function(x) paste0("col_", x)))
if (suppress.input) dataframe[[col]] <- NULL
}), envir = parent.frame()
)
}
mb <- NULL
mp <- mungebits:::mungeplane(df)
mb <- mungebits:::mungebit(paramatch)
mb$run(mp, col = 'text', top_n = 3)
tail(colnames(dataframe), top_n_words)
colnames(dataframe)
eval(substitute({
#tail(colnames(dataframe), top_n) [(dim(dataframe)[2]-top_n_words + 1):dim(dataframe)[2]] <- unlist(lapply(top_n, function(x) paste0("col_", x)))
tail(colnames(dataframe)
}), envir = parent.frame()
)
eval(substitute({
#tail(colnames(dataframe), top_n) [(dim(dataframe)[2]-top_n_words + 1):dim(dataframe)[2]] <- unlist(lapply(top_n, function(x) paste0("col_", x)))
tail(colnames(dataframe))
}), envir = parent.frame()
)
eval(substitute({tail(colnames(dataframe))}), envir = parent.frame())
unlist(lapply(top_n, function(x) paste0("col_", x)))
eval(substitute({tail(colnames(dataframe),top_n_words)}), envir = parent.frame())
eval(substitute({unlist(lapply(top_n, function(x) paste0("col_", x)))}), envir = parent.frame())
eval(substitute({unlist(lapply(top_n, function(x) paste0("col_", x)))}), envir = parent.frame())[1]
eval(substitute({tail(colnames(dataframe),top_n_words)}), envir = parent.frame())[1]
mb <- NULL
mp <- mungebits:::mungeplane(df)
mb <- mungebits:::mungebit(paramatch)
mb$run(mp, col = 'text', top_n = 3)
mb <- NULL
mp <- mungebits:::mungeplane(df)
mb <- mungebits:::mungebit(paramatch)
mb$run(mp, col = 'text', top_n = 3)
tail(colnames(dataframe), top_n_words)
eval(substitute({
#tail(colnames(dataframe), top_n) [(dim(dataframe)[2]-top_n_words + 1):dim(dataframe)[2]] <- unlist(lapply(top_n, function(x) paste0("col_", x)))
tail(colnames(dataframe), top_n_words) }), envir = parent.frame()
eval(substitute({
tail(colnames(dataframe), top_n_words) #<- unlist(lapply(top_n, function(x) paste0("col_", x)))
}), envir = parent.frame()
)
mb <- NULL
mp <- mungebits:::mungeplane(df)
mb <- mungebits:::mungebit(paramatch)
mb$run(mp, col = 'text', top_n = 3)
eval(substitute({n
x <- 1
h <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
h()
rm(x, h)
j <- function(x) {
y <- 2
function() {
c(x, y)
}
}
k <- j(1)
k()
rm(j, k)
